name: Django CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: animal_shelter_foundation
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DJANGO_SETTINGS_MODULE: paws_heaven.settings

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest

    - name: Run migrations
      run: python manage.py migrate --no-input

    - name: Check for test files
      id: check_tests
      run: |
        if [ -d "tests" ] || find . -type d -name "tests" -exec [ -f {}/__init__.py \; -o -f {}/test_*.py \; ] \; -print -quit | grep -q .; then
          echo "tests_found=true" >> $GITHUB_OUTPUT
        else
          echo "No test files found. Skipping tests."
          echo "tests_found=false" >> $GITHUB_OUTPUT
        fi

    - name: Run Django tests
      if: steps.check_tests.outputs.tests_found == 'true'
      run: python manage.py test
      env:
        DJANGO_SETTINGS_MODULE: ${{ env.DJANGO_SETTINGS_MODULE }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DJANGO_DEBUG: 'False'

    - name: Run pytest
      if: steps.check_tests.outputs.tests_found == 'true'
      run: |
        # Run pytest with verbose output
        if ! pytest -v; then
          # If pytest fails, check if it's because no tests were found
          if [ $? -eq 5 ]; then
            echo "::notice::No tests found by pytest, but this is not a failure"
            exit 0
          else
            exit 1
          fi
        fi

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

  docker-build:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Collect static files
      run: python manage.py collectstatic --noinput
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DJANGO_DEBUG: ${{ secrets.DJANGO_DEBUG }}
        DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  docker-push:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=raw,value=latest
          type=sha,format=long
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
