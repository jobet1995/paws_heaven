name: Animal Shelter Foundation CI/CD

on:
  push:
    branches:
      - develop    # Developer environment
      - qa         # QA environment
      - staging    # ST environment
      - sit        # SIT environment
      - main       # Production environment
      - '**'       # Any other branch
  pull_request:
    branches: [develop, qa, staging, sit, main, '**']
  create:         # Trigger when a new branch or tag is created
# Environment configurations
env:
  DOCKER_IMAGE: animal_shelter_foundation
  DOCKER_REGISTRY: docker.io  # Change to your registry if not using Docker Hub
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DJANGO_SETTINGS_MODULE: paws_heaven.settings
  
  # Default environment variables - will be overridden in jobs as needed
  DJANGO_DEBUG: 'True'
  DJANGO_ALLOWED_HOSTS: '.animalshelter.com'

# Common environment variables for all jobs
defaults:
  run:
    working-directory: .

jobs:
  # Branch check - runs on any branch including new ones
  branch-check:
    name: Branch Check
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'create' || 
      (github.event_name == 'push' && !contains(github.ref, 'refs/heads/develop') && !contains(github.ref, 'refs/heads/qa') && !contains(github.ref, 'refs/heads/staging') && !contains(github.ref, 'refs/heads/sit') && !contains(github.ref, 'refs/heads/main'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest pytest-django
    
    - name: Create static directory
      run: |
        mkdir -p static
        touch static/.gitkeep  # Ensure the directory is not empty
    
    - name: Run database migrations
      run: python manage.py check --deploy --fail-level WARNING
      env:
        DJANGO_SETTINGS_MODULE: ${{ env.DJANGO_SETTINGS_MODULE }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DJANGO_DEBUG: 'False'
    
    - name: Run Django tests
      run: python manage.py test --noinput
      env:
        DJANGO_SETTINGS_MODULE: ${{ env.DJANGO_SETTINGS_MODULE }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DJANGO_DEBUG: 'False'
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

  # Build and test the application
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [branch-check]
    if: |
      contains(github.ref, 'refs/heads/develop') || 
      contains(github.ref, 'refs/heads/qa') || 
      contains(github.ref, 'refs/heads/staging') || 
      contains(github.ref, 'refs/heads/sit') || 
      contains(github.ref, 'refs/heads/main')
    
    # Set environment variables for this job
    env:
      DJANGO_DEBUG: 'False'
      DJANGO_ALLOWED_HOSTS: '.animalshelter.com,localhost,127.0.0.1'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest pytest-django

    - name: Run database migrations
      run: python manage.py migrate --noinput
      env:
        DJANGO_SETTINGS_MODULE: ${{ env.DJANGO_SETTINGS_MODULE }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DJANGO_DEBUG: ${{ env.DJANGO_DEBUG }}
    
    - name: Run Django tests
      run: python manage.py test --noinput
      env:
        DJANGO_SETTINGS_MODULE: ${{ env.DJANGO_SETTINGS_MODULE }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DJANGO_DEBUG: ${{ env.DJANGO_DEBUG }}
    
    - name: Run pytest
      run: |
        python -m pytest -v --ds=paws_heaven.settings
      env:
        DJANGO_SETTINGS_MODULE: ${{ env.DJANGO_SETTINGS_MODULE }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DJANGO_DEBUG: ${{ env.DJANGO_DEBUG }}
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

  docker-build:
    name: Build Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    
    # Set environment variables for this job
    env:
      DOCKER_BUILDKIT: 1
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver: docker-container
        
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
    
    - name: Extract branch/tag name for image tagging
      id: extract_branch
      run: |
        # Use branch name for image tag, replacing / with -
        if [ "${GITHUB_REF#refs/heads/}" != "${GITHUB_REF}" ]; then
          echo "tag_name=${GITHUB_REF#refs/heads/}" | sed 's/\//-/' >> $GITHUB_OUTPUT
        elif [ "${GITHUB_REF#refs/tags/}" != "${GITHUB_REF}" ]; then
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "tag_name=latest" >> $GITHUB_OUTPUT
        fi
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      id: build
      with:
        context: .
        push: false
        tags: |
          ${{ env.DOCKER_IMAGE }}:sha-${{ github.sha }}
          ${{ env.DOCKER_IMAGE }}:${{ steps.extract_branch.outputs.tag_name }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        build-args: |
          DJANGO_ENV=${{ github.ref_name == 'main' && 'production' || github.ref_name }}
    
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    
    - name: Save image metadata
      run: |
        echo "IMAGE_TAG=${{ steps.extract_branch.outputs.tag_name }}" >> $GITHUB_ENV
        echo "IMAGE_SHA_TAG=sha-${{ github.sha }}" >> $GITHUB_ENV
        echo "FULL_IMAGE_TAG=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ steps.extract_branch.outputs.tag_name }}" >> $GITHUB_ENV
        echo "FULL_IMAGE_SHA_TAG=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:sha-${{ github.sha }}" >> $GITHUB_ENV

  # Push Docker image to registry
  docker-push:
    name: Push Docker Image
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'  # Only run on push events
    
    # Set environment variables for this job
    env:
      DOCKER_BUILDKIT: 1
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver: docker-container
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=raw,value=${{ env.IMAGE_TAG }}
          type=raw,value=${{ env.IMAGE_SHA_TAG }}
          type=sha,format=long
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
    
    - name: Log image info
      run: |
        echo "Image pushed with tags: ${{ steps.meta.outputs.tags }}"

  # Deploy to environment
  deploy:
    name: Deploy to ${{ matrix.env.name }}
    needs: docker-push
    
    # Only run on push events
    if: github.event_name == 'push'
    
    # Define the deployment matrix with branch filtering
    strategy:
      matrix:
        include:
          - branch: 'develop'
            env: 
              name: 'developer'
              host: 'dev.animalshelter.com'
            # Only include this matrix entry if we're on the develop branch
            if: ${{ github.ref == 'refs/heads/develop' }}
          - branch: 'qa'
            env: 
              name: 'qa'
              host: 'qa.animalshelter.com'
            if: ${{ github.ref == 'refs/heads/qa' }}
          - branch: 'staging'
            env: 
              name: 'staging'
              host: 'staging.animalshelter.com'
            if: ${{ github.ref == 'refs/heads/staging' }}
          - branch: 'sit'
            env: 
              name: 'sit'
              host: 'sit.animalshelter.com'
            if: ${{ github.ref == 'refs/heads/sit' }}
          - branch: 'main'
            env: 
              name: 'production'
              host: 'animalshelter.com'
            if: ${{ github.ref == 'refs/heads/main' }}
      fail-fast: false
    
    runs-on: ubuntu-latest
    
    # Set environment variables for this job
    env:
      DJANGO_ENV: ${{ matrix.env.name }}
      DJANGO_DEBUG: ${{ matrix.env.name != 'production' && 'True' || 'False' }}
      DJANGO_ALLOWED_HOSTS: ${{ matrix.env.host }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure environment
      run: |
        echo "Deploying to ${{ matrix.env.name }} environment (${{ matrix.env.host }})"
        echo "Using image: ${{ env.FULL_IMAGE_TAG }}"
        echo "Environment: ${{ env.DJANGO_ENV }}"
        echo "Debug mode: ${{ env.DJANGO_DEBUG }}"
    
    # Example: Deploy using SSH (for non-production environments)
    - name: Deploy via SSH
      if: matrix.env.name != 'production'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Pull the new image
          docker pull ${{ env.FULL_IMAGE_TAG }}
          
          # Update the running container
          cd /path/to/your/app
          docker-compose down
          docker-compose up -d
    
    # Example: Deploy to production with approval
    - name: Request production deployment approval
      if: matrix.env.name == 'production'
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.token }}
        approvers: admin1,admin2  # Add your approvers here
        minimum-approvals: 1
    
    - name: Deploy to production
      if: matrix.env.name == 'production' && steps.approval.outputs.approved == 'true'
      run: |
        echo "Deploying to production..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production.yaml
      env:
        KUBECONFIG: ${{ secrets.KUBE_CONFIG }}
    
    - name: Verify deployment
      run: |
        echo "Verifying deployment to ${{ matrix.env.host }}..."
        # Add health check or smoke test here
        # Example: curl -sSf https://${{ matrix.env.host }}/health/ || exit 1
