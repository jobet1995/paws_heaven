name: Django CI/CD Multi-Stage Pipeline

on:
  push:
    branches: [ develop, qa, staging, sit, main ]
  pull_request:
    branches: [ develop, qa, staging, sit, main ]
# Environment variables available to all jobs
env:
  IMAGE_NAME: animal_shelter_foundation
  DOCKERHUB_REPO: ${{ github.actor }}/animal_shelter_foundation
  
jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run migrations
      run: python manage.py migrate --no-input
    
    - name: Create static directory
      run: |
        mkdir -p static
        
    - name: Run tests
      env:
        DJANGO_SETTINGS_MODULE: paws_heaven.settings.testing
      run: |
        python manage.py check --deploy
        python manage.py test --noinput
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

  docker-build:
    name: Build Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Build and export to Docker
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: ${{ env.IMAGE_NAME }}:latest,${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
    
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    
    - name: Collect static files
      run: |
        docker run --rm ${{ env.IMAGE_NAME }}:latest \
          python manage.py collectstatic --noinput

  docker-push:
    name: Push to Docker Hub
    needs: docker-build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Push to Docker Hub
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}

  deploy:
    name: Deploy to ${{ github.ref_name }}
    needs: docker-push
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    
    # Only run on push events, not pull requests
    if: github.event_name == 'push'
    
    steps:
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Set deployment host
      id: set-host
      run: |
        if [ "${{ github.ref_name }}" = "develop" ]; then
          echo "HOST=${{ env.DEV_HOST }}" >> $GITHUB_ENV
        elif [ "${{ github.ref_name }}" = "qa" ]; then
          echo "HOST=${{ env.QA_HOST }}" >> $GITHUB_ENV
        elif [ "${{ github.ref_name }}" = "staging" ]; then
          echo "HOST=${{ env.ST_HOST }}" >> $GITHUB_ENV
        elif [ "${{ github.ref_name }}" = "sit" ]; then
          echo "HOST=${{ env.SIT_HOST }}" >> $GITHUB_ENV
        else
          echo "HOST=${{ env.PROD_HOST }}" >> $GITHUB_ENV
        fi
    
    - name: Deploy to environment
      run: |
        echo "Deploying to $HOST..."
        # Example: ssh $HOST "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} && docker-compose up -d"

  manual-approval:
    name: Manual Approval for Production
    needs: deploy
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Wait for manual approval
      run: echo "This job requires manual approval in the GitHub environment"
